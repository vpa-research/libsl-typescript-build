// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - ohos/util/PlainArray.lsl:46
//  - ohos/util/PlainArray.Iterator_tupleKV.lsl:17
//
import {LSL_IteratorResult} from './LSL_IteratorResult';
import {LSL_IteratorResultAutomaton} from './LSL_IteratorResultAutomaton';
import {PlainArray_Iterator_tupleKV} from './PlainArray_Iterator_tupleKV';
import {libsl} from './libsl_runtime';
import {Approximate} from '@org.jacodb.approximation.annotation';
import {Engine, SymbolicList} from '@org.usvm.api';


/**
 * PlainArray_Iterator_tupleKV_Automaton for PlainArray_Iterator_tupleKV<K, V> ~> PlainArray_Iterator_tupleKV@PlainArray_Iterator_tupleKV */
@Approximate(/* value */ PlainArray_Iterator_tupleKV)
export class PlainArray_Iterator_tupleKV_Automaton<K, V> {

    keys: SymbolicList<K> = libsl.ANYTHING;

    values: SymbolicList<V> = libsl.ANYTHING;

    cursor: number = 0;

    /**
     * [FUNCTION] PlainArray_Iterator_tupleKV_Automaton::next(PlainArray_Iterator_tupleKV<?::K, ?::V>) -> IteratorResult<tuple<?::K, ?::V>>
     * Source: ohos/util/PlainArray.Iterator_tupleKV.lsl:37 */
    next(): IteratorResult<[K, V]> {
        let result: IteratorResult<[K, V]> = libsl.ANYTHING;
        /* body */ {
            let iteratorDone: boolean = true;
            let iteratorValue: [K, V] | undefined = undefined;
            const pos: number = this.cursor;
            if (pos < this.keys.size()) {
                Engine.assume(pos >= 0);
                Engine.assume(pos < this.values.size());
                iteratorValue = [ this.keys.get(pos), this.values.get(pos) ];
                iteratorDone = false;
                this.cursor = pos + 1;
            }
            let lsl$na0 = new LSL_IteratorResultAutomaton<[K, V]>();
            // lsl$na0.__$state = Initialized;
            lsl$na0.value = iteratorValue;
            lsl$na0.done = iteratorDone;
            result = lsl$na0 as any as LSL_IteratorResult<[K, V]>;
        }
        return result;
    }

    /**
     * [FUNCTION] PlainArray_Iterator_tupleKV_Automaton::[Symbol.iterator](PlainArray_Iterator_tupleKV<?::K, ?::V>) -> IterableIterator<tuple<?::K, ?::V>>
     * Source: ohos/util/PlainArray.Iterator_tupleKV.lsl:64 */
    [Symbol.iterator](): IterableIterator<[K, V]> {
        let result: IterableIterator<[K, V]> = libsl.ANYTHING;
        /* body */ {
            result = this;
        }
        return result;
    }

}
