// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - libsl/LSL_MapIterator.lsl:15
//  - libsl/LSL_MapIterator_K.main.lsl:18
//
import {LSL_IteratorResult} from './LSL_IteratorResult';
import {LSL_IteratorResultAutomaton} from './LSL_IteratorResultAutomaton';
import {LSL_MapIterator_K} from './LSL_MapIterator_K';
import {libsl} from './libsl_runtime';
import {Approximate} from '@org.jacodb.approximation.annotation';


/**
 * LSL_MapIterator_K_Automaton for LSL_MapIterator_K<K> ~> LSL_MapIterator_K@LSL_MapIterator_K */
@Approximate(/* value */ LSL_MapIterator_K)
export class LSL_MapIterator_K_Automaton<K> {

    unseen: libsl.LSLMap<K, any> = libsl.ANYTHING;

    /**
     * [FUNCTION] LSL_MapIterator_K_Automaton::next(LSL_MapIterator_K<?::K>) -> IteratorResult<?::K>
     * Source: libsl/LSL_MapIterator_K.main.lsl:35 */
    next(): IteratorResult<K> {
        let result: IteratorResult<K> = libsl.ANYTHING;
        /* body */ {
            let iteratorDone: boolean = true;
            let iteratorValue: K | undefined = undefined;
            if (this.unseen.size() !== 0) {
                let key: K = this.unseen.anyKey();
                this.unseen.remove(key);
                iteratorDone = false;
                iteratorValue = key;
            }
            let lsl$na8 = new LSL_IteratorResultAutomaton<K>();
            // lsl$na8.__$state = Initialized;
            lsl$na8.value = iteratorValue;
            lsl$na8.done = iteratorDone;
            result = lsl$na8 as any as LSL_IteratorResult<K>;
        }
        return result;
    }

}
