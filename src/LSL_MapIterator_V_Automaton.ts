// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - libsl/LSL_MapIterator.lsl:25
//  - libsl/LSL_MapIterator_V.main.lsl:18
//
import {LSL_IteratorResult} from './LSL_IteratorResult';
import {LSL_IteratorResultAutomaton} from './LSL_IteratorResultAutomaton';
import {LSL_MapIterator_V} from './LSL_MapIterator_V';
import {libsl} from './libsl_runtime';
import {Approximate} from '@org.jacodb.approximation.annotation';


/**
 * LSL_MapIterator_V_Automaton for LSL_MapIterator_V<V> ~> LSL_MapIterator_V@LSL_MapIterator_V */
@Approximate(/* value */ LSL_MapIterator_V)
export class LSL_MapIterator_V_Automaton<V> {

    unseen: libsl.LSLMap<any, V> = libsl.ANYTHING;

    /**
     * [FUNCTION] LSL_MapIterator_V_Automaton::next(LSL_MapIterator_V<?::V>) -> IteratorResult<?::V>
     * Source: libsl/LSL_MapIterator_V.main.lsl:35 */
    next(): IteratorResult<V> {
        let result: IteratorResult<V> = libsl.ANYTHING;
        /* body */ {
            let iteratorDone: boolean = true;
            let iteratorValue: V | undefined = undefined;
            if (this.unseen.size() !== 0) {
                let key: any = this.unseen.anyKey();
                let value: V = this.unseen.get(key);
                this.unseen.remove(key);
                iteratorDone = false;
                iteratorValue = value;
            }
            let lsl$na0 = new LSL_IteratorResultAutomaton<V>();
            // lsl$na0.__$state = Initialized;
            lsl$na0.value = iteratorValue;
            lsl$na0.done = iteratorDone;
            result = lsl$na0 as any as LSL_IteratorResult<V>;
        }
        return result;
    }

}
