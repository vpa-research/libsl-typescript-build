// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - ohos/util/ArrayList.lsl:15
//  - ohos/util/ArrayList.main.lsl:18
//
import {ArrayList as ArrayList_} from '@ohos.util.ArrayList';


export class ArrayList<T> {

    constructor() {
        throw new TypeError();
    }

    add(element: T): boolean {
        throw new TypeError();
    }

    insert(element: T, index: number) {
        throw new TypeError();
    }

    has(element: T): boolean {
        throw new TypeError();
    }

    getIndexOf(element: T): number {
        throw new TypeError();
    }

    getLastIndexOf(element: T): number {
        throw new TypeError();
    }

    removeByIndex(index: number): T {
        throw new TypeError();
    }

    remove(element: T): boolean {
        throw new TypeError();
    }

    removeByRange(fromIndex: number, toIndex: number) {
        throw new TypeError();
    }

    replaceAllElements(callbackFn: (t: T, index?: number, arrlist?: ArrayList_<T>) => T,
            thisArg?: Object) {
        throw new TypeError();
    }

    forEach(callbackFn: (t: T, index?: number, arrlist?: ArrayList_<T>) => void, thisArg?: Object) {
        throw new TypeError();
    }

    sort(comparator?: (a: T, b: T) => number) {
        throw new TypeError();
    }

    subArrayList(fromIndex: number, toIndex: number): ArrayList_<T> {
        throw new TypeError();
    }

    clear() {
        throw new TypeError();
    }

    clone(): ArrayList_<T> {
        throw new TypeError();
    }

    getCapacity(): number {
        throw new TypeError();
    }

    convertToArray(): Array<T> {
        throw new TypeError();
    }

    isEmpty(): boolean {
        throw new TypeError();
    }

    increaseCapacityTo(newCapacity: number) {
        throw new TypeError();
    }

    trimToCurrentLength() {
        throw new TypeError();
    }

    get(index: number): T {
        throw new TypeError();
    }

    set(index: number, value: T) {
        throw new TypeError();
    }

    [Symbol.iterator](): IterableIterator<T> {
        throw new TypeError();
    }

    get length(): number {
        throw new TypeError();
    }

}
