// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - ohos/util/TreeMap.lsl:27
//  - ohos/util/TreeMap.main.lsl:17
//
import {TreeMap as TreeMap_} from '@ohos.util.TreeMap';


export class TreeMap<K, V> {

    constructor(c: (a: K, b: K) => boolean | undefined) {
        throw new TypeError();
    }

    isEmpty(): boolean {
        throw new TypeError();
    }

    hasKey(key: K): boolean {
        throw new TypeError();
    }

    hasValue(value: V): boolean {
        throw new TypeError();
    }

    get(key: K): V | undefined {
        throw new TypeError();
    }

    getFirstKey(): K | undefined {
        throw new TypeError();
    }

    getLastKey(): K | undefined {
        throw new TypeError();
    }

    setAll(map: TreeMap_<K, V>) {
        throw new TypeError();
    }

    set(key: K, value: V): Object {
        throw new TypeError();
    }

    remove(key: K): V | undefined {
        throw new TypeError();
    }

    getLowerKey(key: K): K | undefined {
        throw new TypeError();
    }

    getHigherKey(key: K): K | undefined {
        throw new TypeError();
    }

    replace(key: K, newValue: V): boolean {
        throw new TypeError();
    }

    clear() {
        throw new TypeError();
    }

    keys(): IterableIterator<K> {
        throw new TypeError();
    }

    values(): IterableIterator<V> {
        throw new TypeError();
    }

    forEach(callbackFn: (value?: V, key?: K, map?: TreeMap_<K, V>) => void, thisArg?: Object) {
        throw new TypeError();
    }

    entries(): IterableIterator<[K, V]> {
        throw new TypeError();
    }

    [Symbol.iterator](): IterableIterator<[K, V]> {
        throw new TypeError();
    }

    get length(): number {
        throw new TypeError();
    }

}
