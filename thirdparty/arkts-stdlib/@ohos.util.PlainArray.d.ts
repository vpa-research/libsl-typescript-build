// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - ohos/util/PlainArray.lsl:27
//  - ohos/util/PlainArray.main.lsl:17
//
import {PlainArray as PlainArray_} from '@ohos.util.PlainArray';


export class PlainArray<T> {

    constructor() {
        throw new TypeError();
    }

    isEmpty(): boolean {
        throw new TypeError();
    }

    has(key: number): boolean {
        throw new TypeError();
    }

    get(key: number): T | undefined {
        throw new TypeError();
    }

    getIndexOfKey(key: number): number {
        throw new TypeError();
    }

    getIndexOfValue(value: T): number {
        throw new TypeError();
    }

    getKeyAt(index: number): number {
        throw new TypeError();
    }

    getValueAt(index: number): T | undefined {
        throw new TypeError();
    }

    clone(): PlainArray_<T> {
        throw new TypeError();
    }

    add(key: number, value: T) {
        throw new TypeError();
    }

    remove(key: number): T | undefined {
        throw new TypeError();
    }

    removeAt(index: number): T | undefined {
        throw new TypeError();
    }

    removeRangeFrom(index: number, size: number): number {
        throw new TypeError();
    }

    setValueAt(index: number, value: T) {
        throw new TypeError();
    }

    toString(): String {
        throw new TypeError();
    }

    clear() {
        throw new TypeError();
    }

    forEach(callbackFn: (t: T, index?: number, arr?: PlainArray_<T>) => void, thisArg?: Object) {
        throw new TypeError();
    }

    [Symbol.iterator](): IterableIterator<[number, T]> {
        throw new TypeError();
    }

    get length(): number {
        throw new TypeError();
    }

}
