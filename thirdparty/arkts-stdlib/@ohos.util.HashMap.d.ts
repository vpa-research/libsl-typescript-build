// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - ohos/util/HashMap.lsl:27
//  - ohos/util/HashMap.main.lsl:17
//
import {HashMap as HashMap_} from '@ohos.util.HashMap';


export class HashMap<K, V> {

    constructor() {
        throw new TypeError();
    }

    isEmpty(): boolean {
        throw new TypeError();
    }

    hasKey(key: K): boolean {
        throw new TypeError();
    }

    hasValue(value: V): boolean {
        throw new TypeError();
    }

    get(key: K): V {
        throw new TypeError();
    }

    setAll(map: HashMap_<K, V>) {
        throw new TypeError();
    }

    set(key: K, value: V): Object {
        throw new TypeError();
    }

    remove(key: K): V {
        throw new TypeError();
    }

    clear() {
        throw new TypeError();
    }

    keys(): IterableIterator<K> {
        throw new TypeError();
    }

    values(): IterableIterator<V> {
        throw new TypeError();
    }

    replace(key: K, newValue: V): boolean {
        throw new TypeError();
    }

    forEach(callbackFn: (value?: V, key?: K, map?: HashMap_<K, V>) => void, thisArg?: Object) {
        throw new TypeError();
    }

    entries(): IterableIterator<[K, V]> {
        throw new TypeError();
    }

    [Symbol.iterator](): IterableIterator<[K, V]> {
        throw new TypeError();
    }

    get length(): number {
        throw new TypeError();
    }

}
