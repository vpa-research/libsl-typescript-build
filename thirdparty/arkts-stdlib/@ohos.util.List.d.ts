// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - ohos/util/List.lsl:26
//  - ohos/util/List.main.lsl:18
//
import {List as List_} from '@ohos.util.List';


export class List<T> {

    constructor() {
        throw new TypeError();
    }

    add(element: T): boolean {
        throw new TypeError();
    }

    insert(index: number, element: T) {
        throw new TypeError();
    }

    has(element: T): boolean {
        throw new TypeError();
    }

    get(index: number): T {
        throw new TypeError();
    }

    getLastIndexOf(element: T): number {
        throw new TypeError();
    }

    getIndexOf(element: T): number {
        throw new TypeError();
    }

    equal(o: Object): boolean {
        throw new TypeError();
    }

    removeByIndex(index: number): T {
        throw new TypeError();
    }

    remove(element: T): boolean {
        throw new TypeError();
    }

    replaceAllElements(callbackFn: (t: T, index?: number, list?: List_<T>) => T, thisArg?: Object) {
        throw new TypeError();
    }

    forEach(callbackFn: (t: T, index?: number, list?: List_<T>) => void, thisArg?: Object) {
        throw new TypeError();
    }

    sort(comparator: (a: T, b: T) => number) {
        throw new TypeError();
    }

    getSubList(fromIndex: number, toIndex: number): List_<T> {
        throw new TypeError();
    }

    clear() {
        throw new TypeError();
    }

    set(index: number, element: T): T {
        throw new TypeError();
    }

    convertToArray(): Array<T> {
        throw new TypeError();
    }

    isEmpty(): boolean {
        throw new TypeError();
    }

    getFirst(): T | undefined {
        throw new TypeError();
    }

    getLast(): T | undefined {
        throw new TypeError();
    }

    [Symbol.iterator](): IterableIterator<T> {
        throw new TypeError();
    }

    get length(): number {
        throw new TypeError();
    }

}
