// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - ohos/util/LinkedList.lsl:26
//  - ohos/util/LinkedList.main.lsl:18
//
import {LinkedList as LinkedList_} from '@ohos.util.LinkedList';


export class LinkedList<T> {

    constructor() {
        throw new TypeError();
    }

    add(element: T): boolean {
        throw new TypeError();
    }

    addFirst(element: T) {
        throw new TypeError();
    }

    insert(index: number, element: T) {
        throw new TypeError();
    }

    has(element: T): boolean {
        throw new TypeError();
    }

    get(index: number): T {
        throw new TypeError();
    }

    getLastIndexOf(element: T): number {
        throw new TypeError();
    }

    getIndexOf(element: T): number {
        throw new TypeError();
    }

    removeByIndex(index: number): T {
        throw new TypeError();
    }

    removeFirst(): T {
        throw new TypeError();
    }

    removeLast(): T {
        throw new TypeError();
    }

    remove(element: T): boolean {
        throw new TypeError();
    }

    removeFirstFound(element: T): boolean {
        throw new TypeError();
    }

    removeLastFound(element: T): boolean {
        throw new TypeError();
    }

    clone(): LinkedList_<T> {
        throw new TypeError();
    }

    forEach(callbackFn: (t: T, index?: number, arrlist?: LinkedList_<T>) => void,
            thisArg?: Object) {
        throw new TypeError();
    }

    clear() {
        throw new TypeError();
    }

    set(index: number, element: T): T {
        throw new TypeError();
    }

    convertToArray(): Array<T> {
        throw new TypeError();
    }

    getFirst(): T | undefined {
        throw new TypeError();
    }

    getLast(): T | undefined {
        throw new TypeError();
    }

    [Symbol.iterator](): IterableIterator<T> {
        throw new TypeError();
    }

    get length(): number {
        throw new TypeError();
    }

}
