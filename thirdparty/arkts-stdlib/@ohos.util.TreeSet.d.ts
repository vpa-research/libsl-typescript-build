// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - ohos/util/TreeSet.lsl:15
//  - ohos/util/TreeSet.main.lsl:18
//
import {TreeSet as TreeSet_} from '@ohos.util.TreeSet';


export class TreeSet<T> {

    constructor(c: (a: T, b: T) => boolean | undefined) {
        throw new TypeError();
    }

    isEmpty(): boolean {
        throw new TypeError();
    }

    has(value: T): boolean {
        throw new TypeError();
    }

    getFirstValue(): T | undefined {
        throw new TypeError();
    }

    getLastValue(): T | undefined {
        throw new TypeError();
    }

    add(value: T): boolean {
        throw new TypeError();
    }

    remove(value: T): boolean {
        throw new TypeError();
    }

    getLowerValue(): T | undefined {
        throw new TypeError();
    }

    getHigherValue(): T | undefined {
        throw new TypeError();
    }

    popFirst(): T | undefined {
        throw new TypeError();
    }

    popLast(): T | undefined {
        throw new TypeError();
    }

    clear() {
        throw new TypeError();
    }

    values(): IterableIterator<T> {
        throw new TypeError();
    }

    forEach(callbackFn: (value?: T, key?: T, instance?: TreeSet_<T>) => void, thisArg?: Object) {
        throw new TypeError();
    }

    entries(): IterableIterator<[T, T]> {
        throw new TypeError();
    }

    [Symbol.iterator](): IterableIterator<T> {
        throw new TypeError();
    }

    get length(): number {
        throw new TypeError();
    }

}
